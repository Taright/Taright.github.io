<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Taright</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-25T08:44:39.195Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>唐正</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bootstrap</title>
    <link href="http://yoursite.com/2017/11/23/Bootstrap/"/>
    <id>http://yoursite.com/2017/11/23/Bootstrap/</id>
    <published>2017-11-23T08:06:41.000Z</published>
    <updated>2017-11-25T08:44:39.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构和功能"><a href="#结构和功能" class="headerlink" title="结构和功能"></a>结构和功能</h1><p>Bootstrap采用模块化设计，并且用LESS样式表语言来实现各种组件和工具。一个名为bootstrap.less的文件包括了这些组件和工具，开发者可以修改这个文件，自行决定项目需要哪些组件。<br>通过一个基本配置文件可以进行有限的定制，此外也可以进行更加深入的定制。<br>LESS语言支持变量、函数、运算符、组合选择器和一个叫做Mixin（混入）的功能。<br>从Bootstrap 2.0开始，Bootstrap文档包括一个叫做“自定义”的特别选项，开发者可以根据自己的实际需要来选择包含的组件和效果，然后生成和下载已经编译好的包。<br>网格系统和响应式设计以1170像素宽为基准。此外开发者也可以自定义基准。这两种情况下，Bootstrap都能提供四种变体：手机竖屏、手机横屏和平板电脑、PC低分辨率、高分辨率，每个变体都会自动调整网格宽度。</p>
<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>Bootstrap对一系列HTML组件的基本样式进行了定义，并且为文本、表格和表单元素设计了一套独特的、现代化的样式。</p>
<h2 id="可重用组件"><a href="#可重用组件" class="headerlink" title="可重用组件"></a>可重用组件</h2><p>除了基本HTML元素，Bootstrap还包括了其他常用的界面元素，例如带有高级功能的按钮（例如按钮组合、带有下拉菜单选项的按钮、导航栏、水平和垂直标签组、导航、分页等等）、标签、高级排版、缩略图、警告信息、进度条等。<br>这些组件都使用CSS的类实现。在页面中需要将其对应到特定的HTML元素上面。</p>
<h2 id="JavaScript组件"><a href="#JavaScript组件" class="headerlink" title="JavaScript组件"></a>JavaScript组件</h2><p>通过jQuery，Bootstrap加入了一些JavaScript组件。它们提供了例如对话框、工具提示、轮播等功能。此外还增强了一些用户界面元素的功能，例如输入框的自动完成。Bootstrap 2.0支持以下JavaScript插件：Modal（模态对话框）、Dropdown（下拉菜单）、Scrollspy（滚动监听）、Tab（标签页）、Tooltip（工具提示）、Popover（浮动提示）、Alert（警告）、Button（按钮）、Collapse（折叠）、Carousel（轮播）、Typeahead（输入提示）、Affix（附加导航）。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p> <a href="https://getbootstrap.com/" target="_blank" rel="external">Bootstrap官方网站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;结构和功能&quot;&gt;&lt;a href=&quot;#结构和功能&quot; class=&quot;headerlink&quot; title=&quot;结构和功能&quot;&gt;&lt;/a&gt;结构和功能&lt;/h1&gt;&lt;p&gt;Bootstrap采用模块化设计，并且用LESS样式表语言来实现各种组件和工具。一个名为bootstrap.less
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AngularJS</title>
    <link href="http://yoursite.com/2017/11/23/AngularJS/"/>
    <id>http://yoursite.com/2017/11/23/AngularJS/</id>
    <published>2017-11-23T07:25:05.000Z</published>
    <updated>2017-11-25T08:44:03.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>AngularJS是为了克服HTML在构建应用上的不足而设计的。HTML是一门很好的伪静态文本展示设计的声明式语言，但要构建WEB应用的话它就显得乏力了。所以我做了一些工作（你也可以觉得是小花招）来让浏览器做我想要的事。<br>通常，我们是通过以下技术来解决静态网页技术在构建动态应用上的不足：<br>类库 - 类库是一些函数的集合，它能帮助你写WEB应用。起主导作用的是你的代码，由你来决定何时使用类库。类库有：jQuery等<br>框架 - 框架是一种特殊的、已经实现了的WEB应用，你只需要对它填充具体的业务逻辑。这里框架是起主导作用的，由它来根据具体的应用逻辑来调用你的代码。框架有：knockout、sproutcore等。<br>AngularJS使用了不同的方法，它尝试去补足HTML本身在构建应用方面的缺陷。AngularJS通过使用我们称为指令(directives)的结构，让浏览器能够识别新的语法。例如：<br>使用双大括号
 {{}}
语法进行数据绑定；<br>使用DOM控制结构来实现迭代或者隐藏DOM片段；<br>支持表单和表单的验证；<br>能将逻辑代码关联到相关的DOM元素上；<br>能将HTML分组成可重用的组件。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>AngularJS试图成为WEB应用中的一种客户端的解决方案。这意味着它不只是你的WEB应用中的一个小部分，还是一个完整的客户端的解决方案。这会让AngularJS在构建一个CRUD（增加Create、查询Retrieve、更新Update、删除Delete）的应用时显得很“固执”（原文为opinionated,意指没有太多的其他方式）。但是，尽管它很“固执”，它仍然能确保它的“固执”只是在你构建应用的起点，并且你仍能灵活变动。AngularS的一些出众之处如下：<br>构建一个CRUD应用可能用到的全部内容包括：数据绑定、基本模板标识符、表单验证、路由、深度链接、组件重用、依赖注入。<br>测试方面包括：单元测试、端对端测试、模拟和自动化测试框架。<br>具有目录布局和测试脚本的种子应用作为起点。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p> <a href="https://angularjs.io/" target="_blank" rel="external">AngularJS官网</a><br> <a href="http://www.runoob.com/angularjs/angularjs-tutorial.html" target="_blank" rel="external">AngularJS教程</a><br> <a href="http://www.angularjs.cn/" target="_blank" rel="external">AngularJS中文社区</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;p&gt;AngularJS是为了克服HTML在构建应用上的不足而设计的。HTML是一门很好的伪静态文本展示设计的声明式语言，但要构建
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自然语言处理</title>
    <link href="http://yoursite.com/2017/11/23/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/11/23/自然语言处理/</id>
    <published>2017-11-23T07:05:25.000Z</published>
    <updated>2017-11-25T08:44:59.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h1><h2 id="数据稀疏与平滑技术"><a href="#数据稀疏与平滑技术" class="headerlink" title="数据稀疏与平滑技术"></a>数据稀疏与平滑技术</h2><p>大规模数据统计方法与有限的训练语料之间必然产生数据稀疏问题，导致零概率问题，符合经典的zip’f定律。如IBM, Brown：366M英语语料训练trigram，在测试语料中，有14.7%的trigram和2.2%的bigram在训练语料中未出现。<br>数据稀疏问题定义：“The problem of data sparseness, alsoknown as the zero-frequency problem ariseswhen analyses contain configurations thatnever occurred in the training corpus. Then it isnot possible to estimate probabilities from observedfrequencies, and some other estimation schemethat can generalize (that configurations) from thetraining data has to be used. —— Dagan”。<br>人们为理论模型实用化而进行了众多尝试与努力，诞生了一系列经典的平滑技术，它们的基本思想是“降低已出现n-gram条件概率分布，以使未出现的n-gram条件概率分布非零”，且经数据平滑后一定保证概率和为1，详细如下：</p>
<h3 id="Add-one（Laplace）-Smoothing"><a href="#Add-one（Laplace）-Smoothing" class="headerlink" title="Add-one（Laplace） Smoothing"></a>Add-one（Laplace） Smoothing</h3><p>加一平滑法，又称拉普拉斯定律，其保证每个n-gram在训练语料中至少出现1次，以bigram为例，公式如图：<br>公式！<a href="https://imgsa.baidu.com/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=9b313c968494a4c21e2eef796f9d70b0/54fbb2fb43166d2202f3c80d452309f79152d2a7.jpg" target="_blank" rel="external">bigram</a><br>其中，V是所有bigram的个数。</p>
<h3 id="Good-Turing-Smoothing"><a href="#Good-Turing-Smoothing" class="headerlink" title="Good-Turing Smoothing"></a>Good-Turing Smoothing</h3><p>其基本思想是利用频率的类别信息对频率进行平滑。调整出现频率为c的n-gram频率为c*：<br>公式<img src="https://imgsa.baidu.com/baike/c0%3Dbaike60%2C5%2C5%2C60%2C20/sign=1006482284d6277ffd1f3a6a49517455/55e736d12f2eb9380c57a66bd6628535e5dd6f75.jpg" alt="n-gram"><br>公式<br>直接的改进策略就是“对出现次数超过某个阈值的gram，不进行平滑，阈值一般取8~10”，其他方法请参见“Simple Good-Turing”。</p>
<h3 id="InterpolationSmoothing"><a href="#InterpolationSmoothing" class="headerlink" title="InterpolationSmoothing"></a>InterpolationSmoothing</h3><p>不管是Add-one，还是Good Turing平滑技术，对于未出现的n-gram都一视同仁，难免存在不合理（事件发生概率存在差别），所以这里再介绍一种线性插值平滑技术，其基本思想是将高阶模型和低阶模型作线性组合，利用低元n-gram模型对高元n-gram模型进行线性插值。因为在没有足够的数据对高元n-gram模型进行概率估计时，低元n-gram模型通常可以提供有用的信息。公式如下如右图1：<br><img src="https://imgsa.baidu.com/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=27986ea8a28b87d6444fa34d6661435d/203fb80e7bec54e7a255c687ba389b504ec26aea.jpg" alt="n-gram"><br>扩展方式（上下文相关）为如右图2：<img src="https://imgsa.baidu.com/baike/c0%3Dbaike60%2C5%2C5%2C60%2C20/sign=7f677694fbdcd100d991f07313e22c75/f603918fa0ec08fa159dcf3e5aee3d6d54fbda8e.jpg" alt="n-gram"><br>λs可以通过EM算法来估计，具体步骤如下：<br>首先，确定三种数据：Training data、Held-out data和Test data；<br>然后，根据Training data构造初始的语言模型，并确定初始的λs（如均为1）；<br>最后，基于EM算法迭代地优化λs，使得Held-out data概率（如下式）最大化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;相关技术&quot;&gt;&lt;a href=&quot;#相关技术&quot; class=&quot;headerlink&quot; title=&quot;相关技术&quot;&gt;&lt;/a&gt;相关技术&lt;/h1&gt;&lt;h2 id=&quot;数据稀疏与平滑技术&quot;&gt;&lt;a href=&quot;#数据稀疏与平滑技术&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
  </entry>
  
</feed>
